FROM debian:%%DEBIAN_SUITE%%

RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		curl \
		dirmngr \
		gnupg \
		iproute2 \
		openssh-client \
		telnet \
		unzip \
		wget \
		xz-utils \
	&& rm -r /var/lib/apt/lists/*

RUN apt-get update \
	&& echo nullmailer shared/mailname string me | debconf-set-selections \
	&& DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install nullmailer \
	&& rm -r /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y --no-install-recommends \
		git \
		make \
		nmap \
		sshpass \
	&& rm -r /var/lib/apt/lists/*

# Запрещаем установку пакетов PHP из дистрибутива Debian.
# https://github.com/docker-library/php/pull/542
RUN set -eux; \
	{ \
		echo 'Package: php*'; \
		echo 'Pin: release *'; \
		echo 'Pin-Priority: -1'; \
	} > /etc/apt/preferences.d/no-debian-php

# Зависимости для выполенния phpize.
ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkg-config \
		re2c

RUN apt-get update && apt-get install -y --no-install-recommends $PHPIZE_DEPS \
	&& rm -r /var/lib/apt/lists/*

RUN curl -sL https://deb.nodesource.com/setup_9.x | bash - \
	&& apt-get update && apt-get install -y --no-install-recommends \
		nodejs \
	&& rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca().
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no
# performance impact on x86_64).
# Enable optimization (-O2).
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is
# non-default).
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than
# sysv hash; in this configuration, sysv hash is also generated).
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS %%GPG_KEYS%%

ENV PHP_VERSION %%PHP_VERSION%%
ENV PHP_URL="%%PHP_URL%%" PHP_ASC_URL="%%PHP_ASC_URL%%" PHP_FILENAME="%%PHP_FILENAME%%"
ENV PHP_SHA256="%%PHP_SHA256%%" PHP_MD5="%%PHP_MD5%%"

RUN set -xe; \
	\
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	wget -O ${PHP_FILENAME} "$PHP_URL"; \
	\
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *${PHP_FILENAME}" | sha256sum -c -; \
	fi; \
	if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *${PHP_FILENAME}" | md5sum -c -; \
	fi; \
	\
	if [ -n "$PHP_ASC_URL" ]; then \
		wget -O ${PHP_FILENAME}.asc "$PHP_ASC_URL"; \
		export GNUPGHOME="$(mktemp -d)"; \
		for key in $GPG_KEYS; do \
			gpg --no-tty --keyserver ipv4.pool.sks-keyservers.net --recv-keys "$key"; \
		done; \
		gpg --batch --verify ${PHP_FILENAME}.asc ${PHP_FILENAME}; \
		rm -rf "$GNUPGHOME"; \
	fi;

COPY docker-php-* /usr/local/bin/
COPY php*.ini /usr/local/etc/php/

RUN set -eux; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends \
		lemon \
		libargon2-0-dev \
# Для расширения bzip2.
		libbz2-dev \
		libcurl4-openssl-dev \
		libedit-dev \
		libicu-dev \
# Для поддержки JPEG расширением gd.
		libjpeg-dev \
		libmcrypt-dev \
		libmysqld-dev \
# Для поддержки PNG расширением gd.
		libpng-dev \
# Для поддержки PostgreSQL.
		libpq-dev \
		libsodium-dev \
		libsqlite3-dev \
		libssl-dev \
# Для расширения tidy.
		libtidy-dev \
		libxml2-dev \
# Для расширения xsl.
		libxslt1-dev \
		zlib1g-dev \
		${PHP_EXTRA_BUILD_DEPS:-} \
	; \
	rm -rf /var/lib/apt/lists/*; \
	\
	export \
		CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	; \
	docker-php-source extract; \
	cd /usr/src/php; \
	gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
	debMultiarch="$(dpkg-architecture --query DEB_BUILD_MULTIARCH)"; \
# https://bugs.php.net/bug.php?id=74125
	if [ ! -d /usr/include/curl ]; then \
		ln -sT "/usr/include/$debMultiarch/curl" /usr/local/include/curl; \
	fi; \
	./configure \
		--build="$gnuArch" \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
# Неправильные флаги должны прерывать сборку, чтобы их легче было обнаружить.
		--enable-option-checking=fatal \
		\
		--disable-cgi \
		\
# Для правильной работы некоторых функций (например ftp_ssl_connect) расширение ftp должно быть
# собрано статически.
		--enable-ftp \
# Требуется для Composer.
		--enable-hash \
# Требуется для Composer.
		--enable-json \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly
# (see https://github.com/docker-library/php/issues/195).
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions
# are (since it's a plugin for several extensions, not an extension in itself).
		--enable-mysqlnd \
		--enable-pdo \
# Требуется для Composer.
		--enable-phar \
		--with-libedit \
# https://github.com/docker-library/php/issues/439
		--with-mhash \
# Для правильной работы некоторых функций (например ftp_ssl_connect) OpenSSL должен быть собран
# статически.
		--with-openssl=/usr \
# https://wiki.php.net/rfc/argon2_password_hash (7.2+).
		--with-password-argon2 \
		--with-zlib \
		\
		--enable-ctype=shared \
		--enable-dom=shared \
		--enable-exif=shared \
		--enable-fileinfo=shared \
		--enable-filter=shared \
		--enable-intl=shared \
		--enable-pcntl=shared \
		--enable-posix=shared \
		--enable-session=shared \
		--enable-simplexml=shared \
		--enable-soap=shared \
		--enable-sockets=shared \
		--enable-tokenizer=shared \
		--enable-xmlreader=shared \
		--enable-xmlwriter=shared \
		--enable-zip=shared \
		--with-bz2=shared \
		--with-curl=shared \
		--with-gd=shared \
		--with-gettext=shared \
		--with-iconv=shared \
		--with-jpeg-dir=/usr/local \
		--with-mcrypt=shared \
		--with-mysql=shared \
		--with-mysqli=shared \
		--with-pdo_mysql=shared \
		--with-pdo_pgsql=shared \
		--with-pdo_sqlite=shared \
		--with-pdo_sqlite3=shared \
		--with-pgsql=shared \
		--with-readline=shared \
# https://wiki.php.net/rfc/libsodium.
		--with-sodium=shared \
		--with-sqlite=shared \
		--with-sqlite3=shared \
		--with-tidy=shared \
		--with-xsl=shared \
		\
# bundled pcre does not support JIT on s390x
# https://manpages.debian.org/stretch/libpcre3-dev/pcrejit.3.en.html#AVAILABILITY_OF_JIT_SUPPORT
		$(test "$gnuArch" = 's390x-linux-gnu' && echo '--without-pcre-jit') \
		--with-libdir="lib/$debMultiarch" \
		\
		${PHP_EXTRA_CONFIGURE_ARGS:-} \
	; \
	make -j "$(nproc)"; \
	make install; \
	find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; \
	make clean; \
	cd /; \
	docker-php-source delete; \
	\
# reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
	find /usr/local -type f -executable -exec ldd '{}' ';' \
		| awk '/=>/ { print $(NF-1) }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r apt-mark manual \
	; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
	php --version; \
	\
# https://github.com/docker-library/php/issues/443
	pecl update-channels; \
	rm -rf /tmp/pear ~/.pearrc

## Устанавливаем xdebug.
RUN pecl install --force xdebug-%%XDEBUG_VERSION%%

RUN wget https://getcomposer.org/installer -O - -q \
		| php -- --force --install-dir=/usr/local/bin --filename=composer

ENTRYPOINT ["docker-php-entrypoint"]
WORKDIR /var/www/html

EXPOSE 80
CMD ["docker-apache-start"]
